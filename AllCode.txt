----- ChartPLTWindow.py -----
import sys

import numpy as np
from PyQt5 import QtWidgets

from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg, \
    NavigationToolbar2QT as NavigationToolbar
from matplotlib.figure import Figure

from main import Calculation, ChartLinePltData, ChartQuadRegressPltData

from functions import get_super


class ChartPLTWindow(QtWidgets.QDialog):

    def __init__(self, n, *args, **kwargs):
        super(ChartPLTWindow, self).__init__(*args, **kwargs)
        self.setWindowTitle(f'График {n}')
        self.setFixedSize(800, 800)

        fig = Figure()
        self.axes = fig.add_subplot(111)

        sc = FigureCanvasQTAgg(fig)

        toolbar = NavigationToolbar(sc, self)

        layout = QtWidgets.QGridLayout(self)
        layout.addWidget(toolbar, 0, 0, 1, 1)
        layout.addWidget(sc, 1, 0, 1, 1)



    def line(self, data: ChartLinePltData):
        self.axes.plot(data.df, marker='o', label=[f"E={i}" for i in data.columns])
        self.axes.grid(linestyle='--')

        self.axes.set_ylabel(data.xlabel)
        self.axes.set_xlabel(data.ylabel)
        self.axes.set_xlim([0, max(data.index) * 1.2])
        self.axes.set_ylim([0, max(data.df.max()) * 1.2])

    def quad_regress(self, data: ChartQuadRegressPltData):
        for i in data.columns:
            model = np.poly1d(np.polyfit(data.df[i].index.tolist(), data.df[i].values.tolist(), 2))
            polyline = np.linspace(0.1, 1, 50)
            coefficients = list(model.coefficients)
            self.axes.plot(
                polyline, model(polyline), linestyle='dashed', linewidth=2,
                label=f"{round(coefficients[0], 3)}x{get_super('2')} "
                      f"{'+' if coefficients[1] > 0 else ''} {round(coefficients[1], 3)}x "
                      f"{'+' if coefficients[2] > 0 else ''} {round(coefficients[2], 3)}"
            )

    def start(self):
        self.axes.legend()
        self.show()
        self.exec_()


if __name__ == "__main__":
    d_lst_input = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
    E_lst_input = [1, 1.6]
    calculation = Calculation(d_lst_input=d_lst_input, E_lst_input=E_lst_input)
    app = QtWidgets.QApplication(sys.argv)
    chartPlt = ChartPLTWindow(1)
    chartPlt.line(calculation.chart_v_y_data)
    chartPlt.quad_regress(calculation.chart_quad_regress_data)
    chartPlt.start()
    app.exec_()


----- Charts.py -----
import matplotlib.pyplot as plt
from pandas import DataFrame

pi = 3.14159265
Yc = 17.3 * (10 ** -6)

class ChartLinePltData:
    def __init__(self, n, df: DataFrame, xlabel: str = '', ylabel: str = ''):
        self.n = n
        self.columns = df.columns
        self.index = df.index
        self.df = df
        self.xlabel = xlabel
        self.ylabel = ylabel


class ChartQuadRegressPltData:
    def __init__(self, n, df: DataFrame, linestyle='dashed', linewidth=2):
        self.n = n
        self.columns = df.columns
        self.index = df.index
        self.df = df
        self.linestyle = linestyle
        self.linewidth = linewidth
        pass


class ChartLinePLT:
    def __init__(self, data: ChartLinePltData, alpha=0.75):
        plt.figure(data.n)
        plt.plot(data.df, marker='o', label=[f"{i}" for i in data.columns], alpha=alpha)
        plt.grid(linestyle='--')
        plt.ylabel(data.xlabel)
        plt.xlabel(data.ylabel)
        plt.xlim([0, max(data.index) * 1.2])
        plt.ylim([0, max(data.df.max()) * 1.2])


----- create_zip.py -----
import shutil
shutil.make_archive('dist/UI', 'zip', 'dist/UI')

----- functions.py -----
from math import pi
from Monitor import getMonitors
from settings import STANDART_DPI


def get_super(x):
    normal = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-=()"
    super_s = "ᴬᴮᶜᴰᴱᶠᴳᴴᴵᴶᴷᴸᴹᴺᴼᴾQᴿˢᵀᵁⱽᵂˣʸᶻᵃᵇᶜᵈᵉᶠᵍʰᶦʲᵏˡᵐⁿᵒᵖ۹ʳˢᵗᵘᵛʷˣʸᶻ⁰¹²³⁴⁵⁶⁷⁸⁹⁺⁻⁼⁽⁾"
    res = x.maketrans(''.join(normal), ''.join(super_s))
    return x.translate(res)


def get_sub(x):
    normal = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-=()"
    sub_s = "ₐ₈CDₑբGₕᵢⱼₖₗₘₙₒₚQᵣₛₜᵤᵥwₓᵧZₐ♭꜀ᑯₑբ₉ₕᵢⱼₖₗₘₙₒₚ૧ᵣₛₜᵤᵥwₓᵧ₂₀₁₂₃₄₅₆₇₈₉₊₋₌₍₎"
    res = x.maketrans(''.join(normal), ''.join(sub_s))
    return x.translate(res)


def degrees_to_radians(angle: float) -> float:
    return angle * pi / 180


def change_size(window):
    screen = window.screen()
    monitors = getMonitors()
    monitor = monitors[screen.name()]
    print(screen.name(), monitor.get_max_dpi())
    k = monitor.get_max_dpi() / STANDART_DPI
    if k > 1:
        window.setMinimumSize(round(window.size().width() * k), round(window.size().height() * k))
        window.setMaximumSize(round(window.size().width() * k), round(window.size().height() * k))
        window.setBaseSize(round(window.size().width() * k), round(window.size().height() * k))


def radians_to_degrees(angle_rad: float) -> float:
    return angle_rad * 180 / pi


def myround(x: float, lst: list):
    for i in lst:
        if x < i:
            return i
    return lst[-1]


----- main.py -----
import math
from typing import List
from scipy.stats import t





class Calculation:
    def __init__(self, name, alpha, n, lst1: list[list[int]]):
        d_med = 0
        summ_d_d = 0
        summ_d_d_2 = 0
        for i in range(n):
            lst1[i].append(lst1[i][2] - lst1[i][1])
            d_med += lst1[i][3]
        d_med = d_med / n
        for i in range(n):
            lst1[i].append(lst1[i][3] - d_med)
            lst1[i].append(lst1[i][4] ** 2)
            summ_d_d_2 += lst1[i][5]
            summ_d_d += lst1[i][4]

        S_m_d = math.sqrt(summ_d_d_2 / (n * (n - 1)))

        t_see = d_med / S_m_d

        t_crit = t.ppf(1 - alpha / 2, n - 1)

        self.d_med = d_med
        self.summ_d_d_2 = summ_d_d_2
        self.summ_d_d = summ_d_d
        self.S_m_d = S_m_d
        self.t_see = t_see
        self.t_crit = t_crit
        self.lst = lst1


if __name__ == "__main__":
    name = "озимая пшеница"
    alpha = 0.05
    n = 7
    lst1 = [[2017, 46, 52], [2018, 48, 53], [2019, 46, 45], [2020, 51, 56], [2021, 52, 58], [2022, 48, 55],
            [2023, 52, 59]]
    calculation = Calculation(name, alpha, n, lst1)
    print(calculation)


----- Monitor.py -----
import ctypes
import win32api
from screeninfo import get_monitors

PROCESS_PER_MONITOR_DPI_AWARE = len(get_monitors())
MDT_EFFECTIVE_DPI = 0


def round_custom(num, step):
    return round(num / step) * step


class Monitor:
    def __init__(self, shcore, monitor):
        self.shcore = shcore
        self.monitor = monitor
        self.dpiX = ctypes.c_uint()
        self.dpiY = ctypes.c_uint()
        shcore.GetDpiForMonitor(
            monitor[0].handle,
            MDT_EFFECTIVE_DPI,
            ctypes.byref(self.dpiX),
            ctypes.byref(self.dpiY)
        )

    def get_max_dpi(self):
        return max([round_custom(self.dpiX.value, 25), round_custom(self.dpiY.value, 25)])


def getMonitors():
    dct = {}
    shcore = ctypes.windll.shcore
    monitors = win32api.EnumDisplayMonitors()
    shcore.SetProcessDpiAwareness(PROCESS_PER_MONITOR_DPI_AWARE)
    for i, monitor in enumerate(monitors):
        name = win32api.GetMonitorInfo(monitors[i][0])['Device']
        monitor_obj = Monitor(shcore, monitor)
        dct[name] = monitor_obj
        print(
            f"{name} dpiX: {round_custom(monitor_obj.dpiX.value, 25)}, dpiY: {round_custom(monitor_obj.dpiY.value, 25)}"
        )
    return dct


----- MyThread.py -----
from PyQt5.QtCore import QThread


class MyThread(QThread):
    def __init__(self, fun=lambda: None):
        self.fun = fun
        super(MyThread, self).__init__()

    def start(self, priority: 'QThread.Priority' = None) -> None:
        self.fun()
        super().start()
        self.exec_()
        self.quit()


----- py_to_txt.py -----
import os

path = "."

exclude = set(['venv', '.idea', '.venv', 'dist'])
lst = []
for root, d_names, f_names in os.walk(path):
    d_names[:] = [d for d in d_names if d not in exclude]
    if len(d_names) != 0:
        for i in range(len(f_names)):
            if os.path.splitext(f_names[i])[1] == '.py':
                lst.append(os.path.join(root, f_names[i]))
print(lst)

with open('AllCode.txt', 'w+', encoding="UTF-8") as fw:
    for i in lst:
        with open(i, 'r', encoding="UTF-8") as fr:
            name = i.replace('.\\', '').replace('\\', '/')
            fw.write('-' * 5 + f' {name} ' + '-' * 5)
            fw.write('\n')
            arr = fr.read().split('\n')
            s = ''
            for i in arr:
                    s += i + '\n'
            fw.write(s)
            fw.write('\n')


----- settings.py -----
DEDUG = True


----- Table.py -----
from typing import Callable
from typing import List, Any

from PyQt5 import QtWidgets, QtGui
from files.TableWindow import Ui_Form as Ui_Form_Table
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from UI import mywindow


class Table(QtWidgets.QDialog):
    def __init__(self, base: 'mywindow', n: int, m: int, data: List[List[Any]] = None,
                 block: bool = False,
                 heading_x: Callable[[int], str] = lambda iterator: str(iterator),
                 heading_y: Callable[[int], str] = lambda iterator: str(iterator),
                 filter_table=lambda dct:
                 round(dct['value'], 5)
                 if dct['value'] is int or dct['value'] is float else
                 dct['value'],
                 types_matrix=None
                 ):
        super(Table, self).__init__()
        self.ui = Ui_Form_Table()
        self.ui.setupUi(self)
        self.setWindowTitle('Таблица')
        self.base = base
        self.block = block
        self.heading_x = heading_x
        self.heading_y = heading_y
        if types_matrix is None:
            types_matrix = [[float for _ in range(n)] for _ in range(m)]
        self.types_matrix = types_matrix
        if data is None:
            data = []
        self.data = data
        self.n = n
        self.m = m
        self.filter = filter_table

        VerticalHeaderLabels = [self.heading_y(i) for i in range(max(len(self.data), self.m))]
        HorizontalHeaderLabels = [
            self.heading_x(i) for i in
            range(max(len(self.data[0]) if len(self.data) > 0 else self.n, self.n))
        ]
        for j in range(min(len(self.data[0]) if len(self.data) > 0 else self.n, self.n)):
            self.ui.tableWidget.insertColumn(j)

        for i in range(min(len(self.data), self.m)):
            self.ui.tableWidget.insertRow(i)
            for j in range(min(len(self.data[0]) if len(self.data) > 0 else self.n, self.n)):
                self.ui.tableWidget.setItem(
                    i,
                    j,
                    QtWidgets.QTableWidgetItem(
                        str(self.filter({'i': i, 'j': j, 'value': self.data[i][j]}))
                    )
                )

        for j in range(len(self.data[0]) if len(self.data) > 0 else 0, self.n):
            self.ui.tableWidget.insertColumn(j)
        for i in range(len(self.data), self.m):
            self.ui.tableWidget.insertRow(i)

        for i in range(0, self.m):
            start = len(self.data[0]) if len(self.data) > 0 else 0
            if len(self.data) <= i < self.m:
                start = 0
            for j in range(start, self.n):
                self.ui.tableWidget.setItem(
                    i,
                    j,
                    QtWidgets.QTableWidgetItem("0.0")
                )
        self.ui.tableWidget.setHorizontalHeaderLabels(HorizontalHeaderLabels)
        self.ui.tableWidget.setVerticalHeaderLabels(VerticalHeaderLabels)

        self.ui.tableWidget.setSizeAdjustPolicy(
            QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.ui.tableWidget.resizeColumnsToContents()

        if self.block:
            self.ui.tableWidget.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)

        self.ui.pushButton.clicked.connect(self.download_table)

    def close_window(self):
        self.close()

    def download_table(self):
        flag = False
        self.data = []
        for i in range(self.m):
            lst = []
            for j in range(self.n):
                try:
                    lst.append(
                        self.types_matrix[i][j](self.ui.tableWidget.item(i, j).text().replace(",", '.')))
                    self.ui.tableWidget.item(i, j).setBackground(QtGui.QColor(255, 255, 255))
                except ValueError:
                    self.ui.tableWidget.item(i, j).setBackground(QtGui.QColor(255, 0, 0))
                    flag = True
                except IndexError as s:
                    print(i, j, s)
            self.data.append(lst)
        if flag:
            self.data = []
        else:
            self.close()
        print(f"download_table data = {self.data}")


----- TableLoader.py -----
from typing import List, Any, TYPE_CHECKING
from PyQt5.QtWidgets import QLabel
from Table import Table

if TYPE_CHECKING:
    from UI import mywindow


class TableLoader:
    def __init__(self, main_window, n: int = 0, m: int = 0, label: QLabel = None,
                 data: List[List[Any]] = None, **kwargs):
        self.data = data
        if data is None:
            self.data = []
        self.n = n
        self.m = m
        self.main_window: 'mywindow' = main_window
        self.kwargs = kwargs
        self.label = label

    def open_table(self):
        self.main_window.variables.update()
        tale_window = Table(self.main_window, self.n, self.m, self.data, **self.kwargs)
        tale_window.show()
        tale_window.exec_()
        self.data = tale_window.data

        if self.label:
            if self.main_window:
                self.label.setStyleSheet("background-color: lightgreen")
            else:
                self.label.setStyleSheet("background-color: red")

    def valid(self, m, n):
        if len(self.data) == self.m:
            if len(self.data[0]) == self.n or len(self.data) == 0 == self.n:
                if self.n == n and self.m == m:
                    return True
                else:
                    self.n = n
                    self.m = m
        if self.label:
            self.label.setStyleSheet("background-color: red")
        return False


----- test.py -----



def f1(s):
    lst1 = []
    lst2 = []
    lst4 = []

    lst = s.split(', ')

    for i in lst:
        lst1.append(f"{i}=self.variables.{i},")
        lst2.append(f"self.{i} = mywindow.is_float(self.main_window.ui.doubleSpinBox)")
        lst4.append(f"self.{i}=None")

    print()
    for i in lst4:
        print(i)
    print()
    for i in lst2:
        print(i)
    print()
    for i in lst1:
        print(i)


s = 'name, alpha, n, lst1'
f1(s)
lst = '''self.alpha = mywindow.is_float(self.main_window.ui.doubleSpinBox_9)
        self.n = mywindow.is_float(self.main_window.ui.doubleSpinBox_11)'''\
    .replace('        ', '').replace('(', ')').split('\n')

for i in lst:
    a = i.split(')')


----- UI.py -----
import pickle

from PyQt5 import QtWidgets
from PyQt5 import QtCore
from PyQt5.QtWidgets import QLabel

from files.MainWindow import Ui_MainWindow
from files.ResultWindow import Ui_Form

from main import Calculation
from functions import change_size, get_sub, get_super
from MyThread import MyThread
from TableLoader import TableLoader

from settings import DEDUG

import sys
from string import Template




class Variables:
    def __init__(self, main_window):
        self.main_window: mywindow = main_window
        self.name = None
        self.alpha = None
        self.n = None
        self.load()

    def load(self):
        self.name = self.main_window.ui.lineEdit.text()
        self.alpha = mywindow.is_float(self.main_window.ui.doubleSpinBox_9)
        self.n = mywindow.is_int(self.main_window.ui.doubleSpinBox_11)

    def update(self):
        self.load()
        self.main_window.table_loader1.m = self.n


class mywindow(QtWidgets.QMainWindow):

    def __init__(self):
        super(mywindow, self).__init__()

        self.calculation = None
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)

        if DEDUG:
            self.ui.lineEdit.setText("озимая пшеница")

        change_size(self)

        self.lst_Thread = []

        self.variables = Variables(self)

        loader1_n = 3
        loader1_m = self.variables.n
        loader1_label = self.ui.label_13
        loader1_data = [
            [2017, 46, 52],
            [2018, 48, 53],
            [2019, 46, 45],
            [2020, 51, 56],
            [2021, 52, 58],
            [2022, 48, 55],
            [2023, 52, 59]]
        loader1_block = False
        loader1_heading_x = lambda iterator: \
            [
                "Годы",
                f"Урожайность, ц/га\n1 сорт, y{get_sub('i')}",
                f"Урожайность, ц/га\n2 сорт, x{get_sub('i')}"
            ][iterator]
        loader1_heading_y = lambda iterator: str(iterator + 1)
        loader1_types_matrix = [[int, int, int] for _ in range(loader1_m)]


        self.table_loader1 = TableLoader(
            self, loader1_n, loader1_m, loader1_label,
            block=loader1_block,
            heading_x=loader1_heading_x,
            heading_y=loader1_heading_y,
            types_matrix=loader1_types_matrix
        )

        if DEDUG:
            pass
            self.table_loader1.data = loader1_data

        self.ui.pushButton_8.clicked.connect(self.table_loader1.open_table)


        add_def_pushButton = lambda: None
        self.ui.pushButton_3.clicked.connect(lambda: self.calculate(add_def_pushButton))

    def calculate(self, fun, *args, **kwargs):
        self.variables.update()
        condition = self.table_loader1.valid(self.variables.n, 3)
        if condition:
            self.calculation = Calculation(
                name=self.variables.name,
                alpha=self.variables.alpha,
                n=self.variables.n,
                lst1=pickle.loads(pickle.dumps(self.table_loader1.data)),
            )
            fun(*args, **kwargs)
            window = Finish(
                self
            )
            window.show()

            windowThread = MyThread(lambda: window.exec_())
            windowThread.start()
            self.lst_Thread.append(windowThread)

    def exec_(self) -> int:
        a = super().exec_()
        for i in self.lst_Thread:
            i.wait()
        return a

    @staticmethod
    def is_float(value: QtWidgets.QDoubleSpinBox) -> float:
        try:
            a = float(value.value())
            value.setStyleSheet("QDoubleSpinBox {}")
            return a
        except ValueError:
            value.setStyleSheet("QDoubleSpinBox { background-color: red; }")
            raise ValueError()

    @staticmethod
    def is_int(value: QtWidgets.QDoubleSpinBox) -> int:
        try:
            a = int(round(float(value.value())))
            value.setStyleSheet("QDoubleSpinBox {}")
            return a
        except ValueError:
            value.setStyleSheet("QDoubleSpinBox { background-color: red; }")
            raise ValueError()


class Finish(QtWidgets.QDialog):
    def __init__(self, parent: mywindow):
        super(Finish, self).__init__()
        self.ui = Ui_Form()
        self.parent = parent
        self.ui.setupUi(self)
        change_size(self)
        _translate = QtCore.QCoreApplication.translate

        result = (("&gt;", "отвергается", "существенно"), ("&lt;", "принимается", "несущественно"))
        num = 1
        if self.parent.calculation.t_see > self.parent.calculation.t_crit:
            num = 0
        template = Template(
            """<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Times New Roman'; font-size:14pt; font-weight:600; font-style:normal;">
<p style=" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-weight:400;">Проверку гипотезы H</span><span style=" font-weight:400; vertical-align:sub;">0</span><span style=" font-weight:400;"> осуществляют с помощью критерия t-Стьюдента.</span></p>
<p style=" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-weight:400;">Так как t</span><span style=" font-weight:400; vertical-align:sub;">набл</span><span style=" font-weight:400;"> $symbol t</span><span style=" font-weight:400; vertical-align:sub;">кр</span><span style=" font-weight:400;">, то нулевая гипотеза $res1 </span></p>
<p style=" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-weight:400;">Следовательно, два сорта $name статистически существенно различаются по уровню урожайности $res2 </span></p></body></html>"""
        )
        formatted_string = template.substitute(
            symbol=result[num][0],
            res1=result[num][1],
            name=self.parent.variables.name,
            res2=result[num][2]
        )
        self.ui.textEdit.setHtml(formatted_string)
        self.ui.doubleSpinBox_12.setValue(round(self.parent.calculation.d_med, 2))
        self.ui.doubleSpinBox_13.setValue(round(self.parent.calculation.S_m_d, 2))


        lst = []
        types_matrix = []
        for i in range(self.parent.table_loader1.m):
            data = self.parent.calculation.lst.copy()
            lst.append([
                round(data[i][0]), round(data[i][1]), round(data[i][2]),
                round(data[i][3]),
                round(data[i][4], 2),
                round(data[i][5], 2)
            ])
            types_matrix.append([int, int, int, int, float, float])

        lst.append(
            [
                '-',
                '-', '-',
                round(self.parent.calculation.d_med * self.parent.variables.n),
                round(self.parent.calculation.summ_d_d, 2),
                round(self.parent.calculation.summ_d_d_2, 2)
            ]
        )
        types_matrix.append([str, str, str, int, float, float])


        loader_results_1_n = self.parent.table_loader1.n + 3
        loader_results_1_m = self.parent.table_loader1.m + 1
        loader_results_1_data = lst
        types_matrix_results_1 = types_matrix
        loader_results_1_block = True
        loader_results_1_heading_x = lambda iterator: \
            [
                "Годы",
                f"Урожайность, ц/га\n1 сорт, y{get_sub('i')}",
                f"Урожайность, ц/га\n2 сорт, x{get_sub('i')}",
                f"Разность\nd{get_sub('i')}=x{get_sub('i')}-y{get_sub('i')}",
                f"d{get_sub('i')}-d_ср",
                f"(d{get_sub('i')}-d_ср){get_super('2')}",
            ][iterator]
        loader_results_1_heading_y = lambda iterator: \
            ([str(i + 1) for i in range(self.parent.table_loader1.m)] + ["Сумма"])[
                iterator]
        self.table_loader_results_1 = TableLoader(
            self.parent, loader_results_1_n, loader_results_1_m, data=loader_results_1_data,
            block=loader_results_1_block,
            heading_x=loader_results_1_heading_x, heading_y=loader_results_1_heading_y,
            types_matrix=types_matrix_results_1
        )



        self.lst_Thread = []

        self.lst_Thread.append(MyThread(lambda: self.table_loader_results_1.open_table()))
        self.ui.pushButton_2.clicked.connect(
            lambda: self.lst_Thread[0].start()
        )

        self.ui.pushButton.clicked.connect(self.exit_w)

    def exit_w(self):
        self.close()


    def view_table(self):
        pass


app = QtWidgets.QApplication([])
application = mywindow()
application.show()

sys.exit(app.exec())


----- files/MainWindow.py -----



from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(900, 350)
        MainWindow.setMinimumSize(QtCore.QSize(900, 350))
        MainWindow.setMaximumSize(QtCore.QSize(900, 350))
        MainWindow.setDocumentMode(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout_5 = QtWidgets.QGridLayout()
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.gridLayout_4 = QtWidgets.QGridLayout()
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.gridLayout_10 = QtWidgets.QGridLayout()
        self.gridLayout_10.setObjectName("gridLayout_10")
        self.label_51 = QtWidgets.QLabel(self.centralwidget)
        self.label_51.setMinimumSize(QtCore.QSize(35, 0))
        self.label_51.setMaximumSize(QtCore.QSize(35, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.label_51.setFont(font)
        self.label_51.setObjectName("label_51")
        self.gridLayout_10.addWidget(self.label_51, 0, 5, 1, 1)
        self.label_49 = QtWidgets.QLabel(self.centralwidget)
        self.label_49.setMinimumSize(QtCore.QSize(20, 0))
        self.label_49.setMaximumSize(QtCore.QSize(20, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.label_49.setFont(font)
        self.label_49.setObjectName("label_49")
        self.gridLayout_10.addWidget(self.label_49, 0, 3, 1, 1)
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.lineEdit.setFont(font)
        self.lineEdit.setObjectName("lineEdit")
        self.gridLayout_10.addWidget(self.lineEdit, 0, 4, 1, 1)
        self.label_39 = QtWidgets.QLabel(self.centralwidget)
        self.label_39.setMinimumSize(QtCore.QSize(400, 0))
        self.label_39.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.label_39.setFont(font)
        self.label_39.setObjectName("label_39")
        self.gridLayout_10.addWidget(self.label_39, 0, 0, 1, 1)
        self.label_50 = QtWidgets.QLabel(self.centralwidget)
        self.label_50.setMinimumSize(QtCore.QSize(60, 0))
        self.label_50.setMaximumSize(QtCore.QSize(60, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setItalic(True)
        self.label_50.setFont(font)
        self.label_50.setObjectName("label_50")
        self.gridLayout_10.addWidget(self.label_50, 0, 1, 1, 1)
        self.gridLayout_4.addLayout(self.gridLayout_10, 0, 0, 1, 1)
        self.gridLayout_11 = QtWidgets.QGridLayout()
        self.gridLayout_11.setObjectName("gridLayout_11")
        self.label_40 = QtWidgets.QLabel(self.centralwidget)
        self.label_40.setMinimumSize(QtCore.QSize(400, 0))
        self.label_40.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.label_40.setFont(font)
        self.label_40.setObjectName("label_40")
        self.gridLayout_11.addWidget(self.label_40, 0, 0, 1, 1)
        self.label_46 = QtWidgets.QLabel(self.centralwidget)
        self.label_46.setMinimumSize(QtCore.QSize(20, 0))
        self.label_46.setMaximumSize(QtCore.QSize(20, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.label_46.setFont(font)
        self.label_46.setObjectName("label_46")
        self.gridLayout_11.addWidget(self.label_46, 0, 2, 1, 1)
        self.label_47 = QtWidgets.QLabel(self.centralwidget)
        self.label_47.setMinimumSize(QtCore.QSize(35, 0))
        self.label_47.setMaximumSize(QtCore.QSize(35, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.label_47.setFont(font)
        self.label_47.setObjectName("label_47")
        self.gridLayout_11.addWidget(self.label_47, 0, 4, 1, 1)
        self.doubleSpinBox_9 = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.doubleSpinBox_9.setMinimumSize(QtCore.QSize(214, 25))
        self.doubleSpinBox_9.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.doubleSpinBox_9.setFont(font)
        self.doubleSpinBox_9.setDecimals(2)
        self.doubleSpinBox_9.setMinimum(-16777215.0)
        self.doubleSpinBox_9.setMaximum(16777215.0)
        self.doubleSpinBox_9.setSingleStep(0.01)
        self.doubleSpinBox_9.setObjectName("doubleSpinBox_9")
        self.gridLayout_11.addWidget(self.doubleSpinBox_9, 0, 3, 1, 1)
        self.label_45 = QtWidgets.QLabel(self.centralwidget)
        self.label_45.setMinimumSize(QtCore.QSize(60, 0))
        self.label_45.setMaximumSize(QtCore.QSize(60, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setItalic(True)
        self.label_45.setFont(font)
        self.label_45.setObjectName("label_45")
        self.gridLayout_11.addWidget(self.label_45, 0, 1, 1, 1)
        self.gridLayout_4.addLayout(self.gridLayout_11, 1, 0, 1, 1)
        self.gridLayout_4.setRowStretch(0, 1)
        self.gridLayout_4.setRowStretch(1, 1)
        self.gridLayout_5.addLayout(self.gridLayout_4, 0, 0, 1, 1)
        self.label_44 = QtWidgets.QLabel(self.centralwidget)
        self.label_44.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.label_44.setText("")
        self.label_44.setObjectName("label_44")
        self.gridLayout_5.addWidget(self.label_44, 0, 1, 1, 1)
        self.gridLayout_5.setColumnStretch(1, 1)
        self.gridLayout_2.addLayout(self.gridLayout_5, 0, 0, 1, 1)
        self.gridLayout_12 = QtWidgets.QGridLayout()
        self.gridLayout_12.setObjectName("gridLayout_12")
        self.label_41 = QtWidgets.QLabel(self.centralwidget)
        self.label_41.setMinimumSize(QtCore.QSize(400, 0))
        self.label_41.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.label_41.setFont(font)
        self.label_41.setObjectName("label_41")
        self.gridLayout_12.addWidget(self.label_41, 0, 0, 1, 1)
        self.gridLayout_2.addLayout(self.gridLayout_12, 1, 0, 1, 1)
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.label_55 = QtWidgets.QLabel(self.centralwidget)
        self.label_55.setMinimumSize(QtCore.QSize(60, 0))
        self.label_55.setMaximumSize(QtCore.QSize(60, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setItalic(True)
        self.label_55.setFont(font)
        self.label_55.setObjectName("label_55")
        self.gridLayout.addWidget(self.label_55, 0, 0, 1, 1)
        self.label_56 = QtWidgets.QLabel(self.centralwidget)
        self.label_56.setMinimumSize(QtCore.QSize(20, 0))
        self.label_56.setMaximumSize(QtCore.QSize(20, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.label_56.setFont(font)
        self.label_56.setObjectName("label_56")
        self.gridLayout.addWidget(self.label_56, 0, 1, 1, 1)
        self.doubleSpinBox_11 = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.doubleSpinBox_11.setMinimumSize(QtCore.QSize(214, 25))
        self.doubleSpinBox_11.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.doubleSpinBox_11.setFont(font)
        self.doubleSpinBox_11.setDecimals(0)
        self.doubleSpinBox_11.setMinimum(-16777215.0)
        self.doubleSpinBox_11.setMaximum(16777215.0)
        self.doubleSpinBox_11.setSingleStep(1.0)
        self.doubleSpinBox_11.setObjectName("doubleSpinBox_11")
        self.gridLayout.addWidget(self.doubleSpinBox_11, 0, 2, 1, 1)
        self.label_57 = QtWidgets.QLabel(self.centralwidget)
        self.label_57.setMinimumSize(QtCore.QSize(35, 0))
        self.label_57.setMaximumSize(QtCore.QSize(35, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.label_57.setFont(font)
        self.label_57.setObjectName("label_57")
        self.gridLayout.addWidget(self.label_57, 0, 3, 1, 1)
        self.label_58 = QtWidgets.QLabel(self.centralwidget)
        self.label_58.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.label_58.setText("")
        self.label_58.setObjectName("label_58")
        self.gridLayout.addWidget(self.label_58, 0, 4, 1, 1)
        self.gridLayout.setColumnStretch(4, 1)
        self.gridLayout_2.addLayout(self.gridLayout, 2, 0, 1, 1)
        self.label_42 = QtWidgets.QLabel(self.centralwidget)
        self.label_42.setMinimumSize(QtCore.QSize(400, 0))
        self.label_42.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.label_42.setFont(font)
        self.label_42.setWordWrap(True)
        self.label_42.setObjectName("label_42")
        self.gridLayout_2.addWidget(self.label_42, 3, 0, 1, 1)
        self.gridLayout_14 = QtWidgets.QGridLayout()
        self.gridLayout_14.setObjectName("gridLayout_14")
        self.label_13 = QtWidgets.QLabel(self.centralwidget)
        self.label_13.setMinimumSize(QtCore.QSize(0, 0))
        self.label_13.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.label_13.setFont(font)
        self.label_13.setStyleSheet("background-color: red")
        self.label_13.setText("")
        self.label_13.setObjectName("label_13")
        self.gridLayout_14.addWidget(self.label_13, 0, 1, 1, 1)
        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_8.setMinimumSize(QtCore.QSize(0, 0))
        self.pushButton_8.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.pushButton_8.setFont(font)
        self.pushButton_8.setObjectName("pushButton_8")
        self.gridLayout_14.addWidget(self.pushButton_8, 0, 0, 1, 1)
        self.gridLayout_2.addLayout(self.gridLayout_14, 4, 0, 1, 1)
        self.gridLayout_3 = QtWidgets.QGridLayout()
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.gridLayout_3.addWidget(self.pushButton_3, 0, 0, 1, 1)
        self.gridLayout_2.addLayout(self.gridLayout_3, 5, 0, 1, 1)
        self.gridLayout_2.setRowStretch(0, 2)
        self.gridLayout_2.setRowStretch(1, 1)
        self.gridLayout_2.setRowStretch(2, 1)
        self.gridLayout_2.setRowStretch(3, 1)
        self.gridLayout_2.setRowStretch(4, 1)
        self.gridLayout_2.setRowStretch(5, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Проверка гипотезы о существовании различий урожайности двух сортов некоторой культуры "))
        self.label_51.setText(_translate("MainWindow", "<html><head/><body><p/></body></html>"))
        self.label_49.setText(_translate("MainWindow", "<html><head/><body><p/></body></html>"))
        self.label_39.setText(_translate("MainWindow", "<html><head/><body><p>Введите наименование культуры:</p></body></html>"))
        self.label_50.setText(_translate("MainWindow", "<html><head/><body><p/></body></html>"))
        self.label_40.setText(_translate("MainWindow", "<html><head/><body><p>Введите уровень значимости:</p></body></html>"))
        self.label_46.setText(_translate("MainWindow", "<html><head/><body><p>=</p></body></html>"))
        self.label_47.setText(_translate("MainWindow", "<html><head/><body><p/></body></html>"))
        self.label_45.setText(_translate("MainWindow", "<html><head/><body><p>α</p></body></html>"))
        self.label_41.setText(_translate("MainWindow", "<html><head/><body><p>Введите количество лет, на протяжении которых проводилось наблюдение:</p></body></html>"))
        self.label_55.setText(_translate("MainWindow", "<html><head/><body><p>n</p></body></html>"))
        self.label_56.setText(_translate("MainWindow", "<html><head/><body><p>=</p></body></html>"))
        self.label_57.setText(_translate("MainWindow", "<html><head/><body><p/></body></html>"))
        self.label_42.setText(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Times New Roman\'; font-size:12pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'MS Shell Dlg 2\';\">Выдвигаем нулевую гипотезу H</span><span style=\" font-family:\'MS Shell Dlg 2\'; vertical-align:sub;\">0</span><span style=\" font-family:\'MS Shell Dlg 2\';\"> средняя величина различий в урожайности культуры равна нулю, т.е. Н</span><span style=\" font-family:\'MS Shell Dlg 2\'; vertical-align:sub;\">0</span><span style=\" font-family:\'MS Shell Dlg 2\';\">: </span><span style=\" font-family:\'MS Shell Dlg 2\'; font-style:italic; text-decoration: overline;\">x-y=0</span><span style=\" font-family:\'MS Shell Dlg 2\';\"> при H</span><span style=\" font-family:\'MS Shell Dlg 2\'; vertical-align:sub;\">1</span><span style=\" font-family:\'MS Shell Dlg 2\';\">: </span><span style=\" font-family:\'MS Shell Dlg 2\'; font-style:italic; text-decoration: overline;\">x-y≠0</span><span style=\" font-family:\'MS Shell Dlg 2\';\">.</span></p></body></html>"))
        self.pushButton_8.setText(_translate("MainWindow", "Заполните исходную таблицу"))
        self.pushButton_3.setText(_translate("MainWindow", "Результат"))


----- files/ResultWindow.py -----



from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(800, 450)
        Form.setMinimumSize(QtCore.QSize(800, 450))
        Form.setMaximumSize(QtCore.QSize(800, 450))
        Form.setStyleSheet("")
        self.gridLayout_2 = QtWidgets.QGridLayout(Form)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout_11 = QtWidgets.QGridLayout()
        self.gridLayout_11.setObjectName("gridLayout_11")
        self.label_48 = QtWidgets.QLabel(Form)
        self.label_48.setMinimumSize(QtCore.QSize(35, 0))
        self.label_48.setMaximumSize(QtCore.QSize(35, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.label_48.setFont(font)
        self.label_48.setObjectName("label_48")
        self.gridLayout_11.addWidget(self.label_48, 0, 4, 1, 1)
        self.label_47 = QtWidgets.QLabel(Form)
        self.label_47.setMinimumSize(QtCore.QSize(20, 0))
        self.label_47.setMaximumSize(QtCore.QSize(20, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.label_47.setFont(font)
        self.label_47.setObjectName("label_47")
        self.gridLayout_11.addWidget(self.label_47, 0, 2, 1, 1)
        self.label_46 = QtWidgets.QLabel(Form)
        self.label_46.setMinimumSize(QtCore.QSize(350, 35))
        self.label_46.setMaximumSize(QtCore.QSize(350, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.label_46.setFont(font)
        self.label_46.setObjectName("label_46")
        self.gridLayout_11.addWidget(self.label_46, 0, 0, 1, 1)
        self.label_49 = QtWidgets.QLabel(Form)
        self.label_49.setMinimumSize(QtCore.QSize(60, 0))
        self.label_49.setMaximumSize(QtCore.QSize(60, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setItalic(True)
        self.label_49.setFont(font)
        self.label_49.setObjectName("label_49")
        self.gridLayout_11.addWidget(self.label_49, 0, 1, 1, 1)
        self.doubleSpinBox_12 = QtWidgets.QDoubleSpinBox(Form)
        self.doubleSpinBox_12.setEnabled(False)
        self.doubleSpinBox_12.setMinimumSize(QtCore.QSize(214, 25))
        self.doubleSpinBox_12.setMaximumSize(QtCore.QSize(16777215, 220))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.doubleSpinBox_12.setFont(font)
        self.doubleSpinBox_12.setStyleSheet("color: black; background-color: white;")
        self.doubleSpinBox_12.setDecimals(2)
        self.doubleSpinBox_12.setMinimum(-999999999.0)
        self.doubleSpinBox_12.setMaximum(999999999.0)
        self.doubleSpinBox_12.setSingleStep(0.001)
        self.doubleSpinBox_12.setProperty("value", 0.0)
        self.doubleSpinBox_12.setObjectName("doubleSpinBox_12")
        self.gridLayout_11.addWidget(self.doubleSpinBox_12, 0, 3, 1, 1)
        self.label_44 = QtWidgets.QLabel(Form)
        self.label_44.setText("")
        self.label_44.setObjectName("label_44")
        self.gridLayout_11.addWidget(self.label_44, 0, 5, 1, 1)
        self.gridLayout_2.addLayout(self.gridLayout_11, 0, 0, 1, 1)
        self.gridLayout_12 = QtWidgets.QGridLayout()
        self.gridLayout_12.setObjectName("gridLayout_12")
        self.label_52 = QtWidgets.QLabel(Form)
        self.label_52.setMinimumSize(QtCore.QSize(350, 35))
        self.label_52.setMaximumSize(QtCore.QSize(350, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.label_52.setFont(font)
        self.label_52.setObjectName("label_52")
        self.gridLayout_12.addWidget(self.label_52, 0, 0, 1, 1)
        self.label_50 = QtWidgets.QLabel(Form)
        self.label_50.setMinimumSize(QtCore.QSize(35, 0))
        self.label_50.setMaximumSize(QtCore.QSize(35, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.label_50.setFont(font)
        self.label_50.setObjectName("label_50")
        self.gridLayout_12.addWidget(self.label_50, 0, 4, 1, 1)
        self.label_53 = QtWidgets.QLabel(Form)
        self.label_53.setMinimumSize(QtCore.QSize(60, 0))
        self.label_53.setMaximumSize(QtCore.QSize(60, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setItalic(True)
        self.label_53.setFont(font)
        self.label_53.setObjectName("label_53")
        self.gridLayout_12.addWidget(self.label_53, 0, 1, 1, 1)
        self.label_51 = QtWidgets.QLabel(Form)
        self.label_51.setMinimumSize(QtCore.QSize(20, 0))
        self.label_51.setMaximumSize(QtCore.QSize(20, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.label_51.setFont(font)
        self.label_51.setObjectName("label_51")
        self.gridLayout_12.addWidget(self.label_51, 0, 2, 1, 1)
        self.doubleSpinBox_13 = QtWidgets.QDoubleSpinBox(Form)
        self.doubleSpinBox_13.setEnabled(False)
        self.doubleSpinBox_13.setMinimumSize(QtCore.QSize(214, 25))
        self.doubleSpinBox_13.setMaximumSize(QtCore.QSize(16777215, 220))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.doubleSpinBox_13.setFont(font)
        self.doubleSpinBox_13.setStyleSheet("color: black; background-color: white;")
        self.doubleSpinBox_13.setDecimals(2)
        self.doubleSpinBox_13.setMinimum(-999999999.0)
        self.doubleSpinBox_13.setMaximum(999999999.0)
        self.doubleSpinBox_13.setSingleStep(0.001)
        self.doubleSpinBox_13.setProperty("value", 0.0)
        self.doubleSpinBox_13.setObjectName("doubleSpinBox_13")
        self.gridLayout_12.addWidget(self.doubleSpinBox_13, 0, 3, 1, 1)
        self.label_45 = QtWidgets.QLabel(Form)
        self.label_45.setText("")
        self.label_45.setObjectName("label_45")
        self.gridLayout_12.addWidget(self.label_45, 0, 5, 1, 1)
        self.gridLayout_2.addLayout(self.gridLayout_12, 1, 0, 1, 1)
        self.textEdit = QtWidgets.QTextEdit(Form)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.textEdit.setFont(font)
        self.textEdit.setObjectName("textEdit")
        self.gridLayout_2.addWidget(self.textEdit, 2, 0, 1, 1)
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("")
        self.pushButton.setObjectName("pushButton")
        self.gridLayout.addWidget(self.pushButton, 0, 0, 1, 1)
        self.pushButton_2 = QtWidgets.QPushButton(Form)
        self.pushButton_2.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setStyleSheet("")
        self.pushButton_2.setObjectName("pushButton_2")
        self.gridLayout.addWidget(self.pushButton_2, 0, 1, 1, 1)
        self.gridLayout_2.addLayout(self.gridLayout, 3, 0, 1, 1)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Проверка гипотезы о существовании различий урожайности двух сортов некоторой культуры"))
        self.label_48.setText(_translate("Form", "<html><head/><body><p/></body></html>"))
        self.label_47.setText(_translate("Form", "<html><head/><body><p>=</p></body></html>"))
        self.label_46.setText(_translate("Form", "<html><head/><body><p>Средняя разность равна:</p></body></html>"))
        self.label_49.setText(_translate("Form", "<html><head/><body><p><span style=\"text-decoration: overline;\">d</span>\n"
"</p></body></html>"))
        self.label_52.setText(_translate("Form", "<html><head/><body><p>Ошибка средней разности равна:</p></body></html>"))
        self.label_50.setText(_translate("Form", "<html><head/><body><p/></body></html>"))
        self.label_53.setText(_translate("Form", "<html><head/><body><p>S<span style=\" text-decoration: overline; vertical-align:sub;\">d</span><span style=\" vertical-align:sub;\"/></p></body></html>"))
        self.label_51.setText(_translate("Form", "<html><head/><body><p>=</p></body></html>"))
        self.textEdit.setHtml(_translate("Form", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Times New Roman\'; font-size:14pt; font-weight:600; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.pushButton.setText(_translate("Form", "ОК"))
        self.pushButton_2.setText(_translate("Form", "Промежуточные расчеты"))


----- files/TableWindow.py -----



from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1100, 700)
        self.gridLayout = QtWidgets.QGridLayout(Form)
        self.gridLayout.setObjectName("gridLayout")
        self.tableWidget = QtWidgets.QTableWidget(Form)
        self.tableWidget.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustIgnored)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.tableWidget.horizontalHeader().setDefaultSectionSize(100)
        self.tableWidget.verticalHeader().setDefaultSectionSize(75)
        self.gridLayout.addWidget(self.tableWidget, 0, 0, 1, 1)
        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setObjectName("pushButton")
        self.gridLayout.addWidget(self.pushButton, 1, 0, 1, 1)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.pushButton.setText(_translate("Form", "Готово"))


